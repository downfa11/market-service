buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.8-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.palantir.docker' version '0.35.0'
}

group = 'com.ns.marketservice'
version = '1.0.0'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	all {
		exclude group: 'org.springframework.boot',module:'spring-boot-start-logging'
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j'

	implementation 'org.springframework.boot:spring-boot-starter-web'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.jetbrains:annotations:23.0.0'
	testImplementation 'junit:junit:4.13.1'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//thymeleaf
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	//spring security
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	//testImplementation 'org.springframework.security:spring-security-test'

	//OAuth
	//implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	//validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	//Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'commons-io:commons-io:2.5'
	//Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	//json
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'
	//Vault
	implementation group: 'org.springframework.vault',name: 'spring-vault-core',version:'3.0.2'
	//QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	implementation "com.querydsl:querydsl-core"
	implementation "com.querydsl:querydsl-collections"

	annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 에러 대응 코드
	annotationProcessor "jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError (javax.annotation.Entity) 에러 대응 코드
}

// QueryDSL
// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}


tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}


docker {
	println(tasks.bootJar.outputs.files)
	name project.name+":"+version
	dockerfile file('./Dockerfile')
	files tasks.bootJar.outputs.files
	buildArgs(['JAR_FILE':tasks.bootJar.outputs.files.singleFile.name])
}